#pragma once
// Generated by chatty from src/srvs/grund-base/api.idl
// DO NOT EDIT
#include <karm-base/std.h>
namespace Grund {

struct IBus {
    static constexpr auto _UID = 0x6e4b38bfd57741ac;
    static constexpr auto _NAME = "Bus";

    template <typename T>
    struct _Client;

    template <typename R>
    auto _dispatch(R &r);

    virtual ~IBus() = default;

    static constexpr auto broadcast_UID = 0xb605ea609b9dfcf2;
    virtual None broadcast() = 0;
};

template <typename T>
struct IBus::_Client : public IBus {
    T _t;

    _Client(T t) : _t{t} {}

    None broadcast() {
        return _t.template invoke<IBus, broadcast_UID, None()>();
    }
};

template <typename R>
auto IBus::_dispatch(R &r) {
    switch (r.id()) {

    case broadcast_UID: {
        return r.reply(broadcast());
    }

    default:
        return r.error();
    }
}

} // namespace Grund
