#pragma once
// Generated by chatty from src/srvs/grund-device/api.idl
// DO NOT EDIT
#include <karm-ipc/base.h>
namespace Grund::Device {

struct IClient {
    static constexpr auto _UID = 0x577d7068826de925;
    static constexpr auto _NAME = "Client";

    template <typename T>
    struct _Client;

    template <typename R>
    auto _dispatch(R &r);

    virtual ~IClient() = default;
    virtual Res<> event(ClientEvent e) = 0;
};

struct IHost {
    static constexpr auto _UID = 0xc2ca16d048ec66e0;
    static constexpr auto _NAME = "Host";

    template <typename T>
    struct _Client;

    template <typename R>
    auto _dispatch(R &r);

    virtual ~IHost() = default;
    virtual Res<> bubble(HostEvent e) = 0;
    virtual Res<> flip(Vec<Math::Recti> r) = 0;
};

template <typename T>
struct IClient::_Client : public IClient {
    T _t;

    _Client(T t) : _t{t} {}

    Res<> event(ClientEvent e) {
        return _t.template invoke<IClient, 0x4119639092e62c55, Res<>(ClientEvent)>(e);
    }
};

template <typename T>
struct IHost::_Client : public IHost {
    T _t;

    _Client(T t) : _t{t} {}

    Res<> bubble(HostEvent e) {
        return _t.template invoke<IHost, 0xa3fa9e0b6b24b1ca, Res<>(HostEvent)>(e);
    }

    Res<> flip(Vec<Math::Recti> r) {
        return _t.template invoke<IHost, 0xe6e5fd26daa9bca9, Res<>(Vec<Math::Recti>)>(r);
    }
};

template <typename R>
auto IClient::_dispatch(R &r) {
    switch (r.id()) {

    case 0x4119639092e62c55: {
        return r.reply(event(r.template get<ClientEvent>()));
    }

    default:
        return r.error();
    }
}

template <typename R>
auto IHost::_dispatch(R &r) {
    switch (r.id()) {

    case 0xa3fa9e0b6b24b1ca: {
        return r.reply(bubble(r.template get<HostEvent>()));
    }

    case 0xe6e5fd26daa9bca9: {
        return r.reply(flip(r.template get<Vec<Math::Recti>>()));
    }

    default:
        return r.error();
    }
}

} // namespace Grund::Device
